{"version":3,"file":"imask.directive.d.ts","sources":["imask.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Provider, Renderer2, EventEmitter, OnDestroy, OnChanges, AfterViewInit, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { IMaskFactory } from \"./imask-factory\";\r\nexport declare const MASKEDINPUT_VALUE_ACCESSOR: Provider;\r\nexport declare class IMaskDirective<Opts extends import('imask').default.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\r\n    private _elementRef;\r\n    private _renderer;\r\n    private _factory;\r\n    private _compositionMode;\r\n    maskRef?: IMask.InputMask<Opts>;\r\n    onTouched: any;\r\n    onChange: any;\r\n    private _viewInitialized;\r\n    private _composing;\r\n    private _writingValue;\r\n    private _writing;\r\n    imask?: Opts;\r\n    unmask?: boolean | 'typed';\r\n    imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;\r\n    accept: EventEmitter<any>;\r\n    complete: EventEmitter<any>;\r\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _factory: IMaskFactory, _compositionMode: boolean);\r\n    readonly element: import(\"imask\").default.MaskElement;\r\n    maskValue: any;\r\n    ngAfterViewInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    destroyMask(): void;\r\n    ngOnDestroy(): void;\r\n    beginWrite(value: any): void;\r\n    endWrite(): any;\r\n    writeValue(value: any): void;\r\n    _onAccept(): void;\r\n    _onComplete(): void;\r\n    private initMask;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(fn: (_: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    _handleInput(value: any): void;\r\n    _compositionStart(): void;\r\n    _compositionEnd(value: any): void;\r\n    private _isAndroid;\r\n}\r\n"]}