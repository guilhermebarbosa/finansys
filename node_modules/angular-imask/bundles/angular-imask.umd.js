(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('imask'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-imask', ['exports', '@angular/core', '@angular/forms', 'imask', '@angular/common'], factory) :
    (global = global || self, factory(global['angular-imask'] = {}, global.ng.core, global.ng.forms, global.IMask, global.ng.common));
}(this, (function (exports, core, forms, IMask, common) { 'use strict';

    var IMask__default = 'default' in IMask ? IMask['default'] : IMask;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var IMaskFactory = /** @class */ (function () {
        function IMaskFactory() {
        }
        IMaskFactory.decorators = [
            { type: core.Injectable, args: [{ providedIn: "root" },] }
        ];
        /** @nocollapse */ IMaskFactory.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function IMaskFactory_Factory() { return new IMaskFactory(); }, token: IMaskFactory, providedIn: "root" });
        return IMaskFactory;
    }());
    if (false) {
        /**
         * @abstract
         * @template Opts
         * @param {?} el
         * @param {?} opts
         * @return {?}
         */
        IMaskFactory.prototype.create = function (el, opts) { };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MASKEDINPUT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return IMaskDirective; })),
        multi: true
    };
    /** @type {?} */
    var DEFAULT_IMASK_ELEMENT = (/**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) { return elementRef.nativeElement; });
    var ɵ0 = DEFAULT_IMASK_ELEMENT;
    /**
     * @template Opts
     */
    var IMaskDirective = /** @class */ (function () {
        function IMaskDirective(_elementRef, _renderer, _factory, _compositionMode) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._factory = _factory;
            this._compositionMode = _compositionMode;
            // init here to support AOT (TODO may be will work with ng-packgr - need to check)
            this.onTouched = (/**
             * @return {?}
             */
            function () { });
            this.onChange = (/**
             * @return {?}
             */
            function () { });
            this.imaskElement = DEFAULT_IMASK_ELEMENT;
            this.accept = new core.EventEmitter();
            this.complete = new core.EventEmitter();
            this._viewInitialized = false;
            this._composing = false;
            this._writing = false;
            if (this._compositionMode == null) {
                this._compositionMode = !this._isAndroid();
            }
        }
        Object.defineProperty(IMaskDirective.prototype, "element", {
            get: /**
             * @return {?}
             */
            function () {
                return this.imaskElement(this._elementRef, this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IMaskDirective.prototype, "maskValue", {
            get: /**
             * @return {?}
             */
            function () {
                if (!this.maskRef)
                    return this.element.value;
                if (this.unmask === 'typed')
                    return this.maskRef.typedValue;
                if (this.unmask)
                    return this.maskRef.unmaskedValue;
                return this.maskRef.value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this.maskRef) {
                    if (this.unmask === 'typed')
                        this.maskRef.typedValue = value;
                    else if (this.unmask)
                        this.maskRef.unmaskedValue = value;
                    else
                        this.maskRef.value = value;
                }
                else {
                    this._renderer.setProperty(this.element, 'value', value);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        IMaskDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.imask)
                this.initMask();
            this._viewInitialized = true;
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        IMaskDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.elementRef && !this.imaskElement)
                this.imaskElement = DEFAULT_IMASK_ELEMENT;
            if (!changes.imask || !this._viewInitialized)
                return;
            if (this.imask) {
                if (this.maskRef)
                    this.maskRef.updateOptions(this.imask);
                else {
                    this.initMask();
                    this.onChange(this.maskValue);
                }
            }
            else {
                this.destroyMask();
            }
        };
        /**
         * @return {?}
         */
        IMaskDirective.prototype.destroyMask = /**
         * @return {?}
         */
        function () {
            if (this.maskRef) {
                this.maskRef.destroy();
                delete this.maskRef;
            }
        };
        /**
         * @return {?}
         */
        IMaskDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyMask();
            this.accept.complete();
            this.complete.complete();
        };
        /**
         * @param {?} value
         * @return {?}
         */
        IMaskDirective.prototype.beginWrite = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._writing = true;
            this._writingValue = value;
        };
        /**
         * @return {?}
         */
        IMaskDirective.prototype.endWrite = /**
         * @return {?}
         */
        function () {
            this._writing = false;
            return this._writingValue;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        IMaskDirective.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value == null ? '' : value;
            if (this.maskRef) {
                this.beginWrite(value);
                if (this.maskValue !== value ||
                    // handle cases like Number('') === 0,
                    // for details see https://github.com/uNmAnNeR/imaskjs/issues/134
                    (typeof value !== 'string' && this.maskRef.value === '') &&
                        !this.maskRef.el.isActive) {
                    this.maskValue = value;
                }
            }
            else {
                this._renderer.setProperty(this.element, 'value', value);
            }
        };
        /**
         * @return {?}
         */
        IMaskDirective.prototype._onAccept = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var value = this.maskValue;
            // if value was not changed during writing don't fire events
            // for details see https://github.com/uNmAnNeR/imaskjs/issues/136
            if (this._writing && value === this.endWrite())
                return;
            this.onChange(value);
            this.accept.emit(value);
        };
        /**
         * @return {?}
         */
        IMaskDirective.prototype._onComplete = /**
         * @return {?}
         */
        function () {
            this.complete.emit(this.maskValue);
        };
        /**
         * @private
         * @return {?}
         */
        IMaskDirective.prototype.initMask = /**
         * @private
         * @return {?}
         */
        function () {
            this.maskRef = this._factory.create(this.element, (/** @type {?} */ (this.imask)))
                .on('accept', this._onAccept.bind(this))
                .on('complete', this._onComplete.bind(this));
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        IMaskDirective.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this._renderer.setProperty(this.element, 'disabled', isDisabled);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        IMaskDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) { this.onChange = fn; };
        /**
         * @param {?} fn
         * @return {?}
         */
        IMaskDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) { this.onTouched = fn; };
        /**
         * @param {?} value
         * @return {?}
         */
        IMaskDirective.prototype._handleInput = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // if mask is attached all input goes throw mask
            if (this.maskRef)
                return;
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this.onChange(value);
            }
        };
        /**
         * @return {?}
         */
        IMaskDirective.prototype._compositionStart = /**
         * @return {?}
         */
        function () { this._composing = true; };
        /**
         * @param {?} value
         * @return {?}
         */
        IMaskDirective.prototype._compositionEnd = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._composing = false;
            this._compositionMode && this._handleInput(value);
        };
        /**
         * @private
         * @return {?}
         */
        IMaskDirective.prototype._isAndroid = /**
         * @private
         * @return {?}
         */
        function () {
            return /android (\d+)/.test(navigator.userAgent.toLowerCase());
        };
        IMaskDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[imask]',
                        host: {
                            '(input)': '_handleInput($event.target.value)',
                            '(blur)': 'onTouched()',
                            '(compositionstart)': '_compositionStart()',
                            '(compositionend)': '_compositionEnd($event.target.value)'
                        },
                        providers: [MASKEDINPUT_VALUE_ACCESSOR]
                    },] }
        ];
        /** @nocollapse */
        IMaskDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: IMaskFactory },
            { type: Boolean, decorators: [{ type: core.Optional }, { type: core.Inject, args: [forms.COMPOSITION_BUFFER_MODE,] }] }
        ]; };
        IMaskDirective.propDecorators = {
            imask: [{ type: core.Input }],
            unmask: [{ type: core.Input }],
            imaskElement: [{ type: core.Input }],
            accept: [{ type: core.Output }],
            complete: [{ type: core.Output }]
        };
        return IMaskDirective;
    }());
    if (false) {
        /** @type {?} */
        IMaskDirective.prototype.maskRef;
        /** @type {?} */
        IMaskDirective.prototype.onTouched;
        /** @type {?} */
        IMaskDirective.prototype.onChange;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._viewInitialized;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._composing;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._writingValue;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._writing;
        /** @type {?} */
        IMaskDirective.prototype.imask;
        /** @type {?} */
        IMaskDirective.prototype.unmask;
        /** @type {?} */
        IMaskDirective.prototype.imaskElement;
        /** @type {?} */
        IMaskDirective.prototype.accept;
        /** @type {?} */
        IMaskDirective.prototype.complete;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._elementRef;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._renderer;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._factory;
        /**
         * @type {?}
         * @private
         */
        IMaskDirective.prototype._compositionMode;
    }

    var __read = (this && this.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (this && this.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    /*
     * Transforms value through mask
     * Takes mask and optionally `from` and `to` pipe types.
     * Usage:
     *   value | imask:MASK_OR_MASKED:opt_from:opt_to
     * Example:
     *   {{ 2 | imask:mask }}
    */
    var IMaskPipe = /** @class */ (function () {
        function IMaskPipe() {
        }
        /**
         * @param {...?} args
         * @return {?}
         */
        IMaskPipe.prototype.transform = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return IMask.pipe.apply(void 0, __spread(args));
        };
        IMaskPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'imask' },] }
        ];
        return IMaskPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultImaskFactory = /** @class */ (function () {
        function DefaultImaskFactory() {
        }
        /**
         * @template Opts
         * @param {?} el
         * @param {?} opts
         * @return {?}
         */
        DefaultImaskFactory.prototype.create = /**
         * @template Opts
         * @param {?} el
         * @param {?} opts
         * @return {?}
         */
        function (el, opts) {
            return IMask__default(el, opts);
        };
        DefaultImaskFactory.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ DefaultImaskFactory.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DefaultImaskFactory_Factory() { return new DefaultImaskFactory(); }, token: DefaultImaskFactory, providedIn: "root" });
        return DefaultImaskFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IMaskDirectiveModule = /** @class */ (function () {
        function IMaskDirectiveModule() {
        }
        IMaskDirectiveModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [IMaskDirective],
                        providers: [{ provide: IMaskFactory, useClass: DefaultImaskFactory }],
                        exports: [IMaskDirective]
                    },] }
        ];
        return IMaskDirectiveModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IMaskModule = /** @class */ (function () {
        function IMaskModule() {
        }
        IMaskModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, IMaskDirectiveModule],
                        declarations: [IMaskPipe],
                        exports: [IMaskPipe, IMaskDirectiveModule]
                    },] }
        ];
        return IMaskModule;
    }());

    Object.defineProperty(exports, 'PIPE_TYPE', {
        enumerable: true,
        get: function () {
            return IMask.PIPE_TYPE;
        }
    });
    Object.defineProperty(exports, 'pipe', {
        enumerable: true,
        get: function () {
            return IMask.pipe;
        }
    });
    exports.IMaskDirective = IMaskDirective;
    exports.IMaskDirectiveModule = IMaskDirectiveModule;
    exports.IMaskFactory = IMaskFactory;
    exports.IMaskModule = IMaskModule;
    exports.IMaskPipe = IMaskPipe;
    exports.MASKEDINPUT_VALUE_ACCESSOR = MASKEDINPUT_VALUE_ACCESSOR;
    exports.ɵa = DefaultImaskFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-imask.umd.js.map
