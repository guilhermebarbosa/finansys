{"version":3,"file":"angular-imask.js","sources":["angular-imask/imask-factory.ts","angular-imask/imask.directive.ts","angular-imask/imask.pipe.ts","angular-imask/default-imask-factory.ts","angular-imask/directive.module.ts","angular-imask/imask.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\ntype AnyMaskedOptions = import('imask').default.AnyMaskedOptions;\r\ntype HTMLMaskingElement = import('imask').default.HTMLMaskingElement;\r\ntype MaskElement = import('imask').default.MaskElement;\r\ntype InputMask<T> = import('imask').default.InputMask<T>;\r\n\r\n@Injectable({providedIn: \"root\"})\r\nexport abstract class IMaskFactory {\r\n    abstract create<Opts extends AnyMaskedOptions>(el: MaskElement | HTMLMaskingElement, opts: Opts): InputMask<Opts>\r\n}\r\n","import {\r\n  Directive, ElementRef, Input, Output, forwardRef, Provider, Renderer2,\r\n  EventEmitter, OnDestroy, OnChanges, AfterViewInit,\r\n  Optional, Inject, SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms';\r\n\r\nimport {IMaskFactory} from \"./imask-factory\";\r\n\r\n\r\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => IMaskDirective),\r\n  multi: true\r\n};\r\n\r\nconst DEFAULT_IMASK_ELEMENT = (elementRef: any) => elementRef.nativeElement;\r\n@Directive({\r\n  selector: '[imask]',\r\n  host: {\r\n    '(input)': '_handleInput($event.target.value)',\r\n    '(blur)': 'onTouched()',\r\n    '(compositionstart)': '_compositionStart()',\r\n    '(compositionend)': '_compositionEnd($event.target.value)'\r\n  },\r\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class IMaskDirective<Opts extends import('imask').default.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\r\n  maskRef?: IMask.InputMask<Opts>;\r\n  onTouched: any;\r\n  onChange: any;\r\n  private _viewInitialized: boolean;\r\n  private _composing: boolean;\r\n  private _writingValue: any;\r\n  private _writing: boolean;\r\n\r\n  @Input() imask?: Opts;\r\n  @Input() unmask?: boolean|'typed';\r\n  @Input() imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;\r\n  @Output() accept: EventEmitter<any>;\r\n  @Output() complete: EventEmitter<any>;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _renderer: Renderer2,\r\n              private _factory: IMaskFactory,\r\n              @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\r\n    // init here to support AOT (TODO may be will work with ng-packgr - need to check)\r\n    this.onTouched = () => {};\r\n    this.onChange = () => {};\r\n    this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n    this.accept = new EventEmitter();\r\n    this.complete = new EventEmitter();\r\n    this._viewInitialized = false;\r\n    this._composing = false;\r\n    this._writing = false;\r\n\r\n    if (this._compositionMode == null) {\r\n      this._compositionMode = !this._isAndroid();\r\n    }\r\n  }\r\n\r\n  get element () {\r\n    return this.imaskElement(this._elementRef, this);\r\n  }\r\n\r\n  get maskValue (): any {\r\n    if (!this.maskRef) return this.element.value;\r\n\r\n    if (this.unmask === 'typed') return this.maskRef.typedValue;\r\n    if (this.unmask) return this.maskRef.unmaskedValue;\r\n    return this.maskRef.value;\r\n  }\r\n\r\n  set maskValue (value: any) {\r\n    if (this.maskRef) {\r\n      if (this.unmask === 'typed') this.maskRef.typedValue = value;\r\n      else if (this.unmask) this.maskRef.unmaskedValue = value;\r\n      else this.maskRef.value = value;\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.imask) this.initMask();\r\n\r\n    this._viewInitialized = true;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.elementRef && !this.imaskElement) this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n\r\n    if (!changes.imask || !this._viewInitialized) return;\r\n\r\n    if (this.imask) {\r\n      if (this.maskRef) this.maskRef.updateOptions(this.imask);\r\n      else {\r\n        this.initMask();\r\n        this.onChange(this.maskValue);\r\n      }\r\n    } else {\r\n      this.destroyMask();\r\n    }\r\n  }\r\n\r\n  destroyMask () {\r\n    if (this.maskRef) {\r\n      this.maskRef.destroy();\r\n      delete this.maskRef;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy () {\r\n    this.destroyMask();\r\n    this.accept.complete();\r\n    this.complete.complete();\r\n  }\r\n\r\n  beginWrite (value: any): void {\r\n    this._writing = true;\r\n    this._writingValue = value;\r\n  }\r\n\r\n  endWrite (): any {\r\n    this._writing = false;\r\n    return this._writingValue;\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    value = value == null ? '' : value;\r\n\r\n    if (this.maskRef) {\r\n      this.beginWrite(value);\r\n\r\n      if (this.maskValue !== value ||\r\n        // handle cases like Number('') === 0,\r\n        // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\r\n        (typeof value !== 'string' && this.maskRef.value === '') &&\r\n          !this.maskRef.el.isActive\r\n      ) {\r\n        this.maskValue = value;\r\n      }\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  _onAccept () {\r\n    const value = this.maskValue;\r\n    // if value was not changed during writing don't fire events\r\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/136\r\n    if (this._writing && value === this.endWrite()) return;\r\n    this.onChange(value);\r\n    this.accept.emit(value);\r\n  }\r\n\r\n  _onComplete () {\r\n    this.complete.emit(this.maskValue);\r\n  }\r\n\r\n  private initMask () {\r\n    this.maskRef = this._factory.create(this.element, this.imask as Opts)\r\n      .on('accept', this._onAccept.bind(this))\r\n      .on('complete', this._onComplete.bind(this));\r\n  }\r\n\r\n  setDisabledState (isDisabled: boolean) {\r\n    this._renderer.setProperty(this.element, 'disabled', isDisabled)\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\r\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\r\n\r\n  _handleInput(value: any): void {\r\n    // if mask is attached all input goes throw mask\r\n    if (this.maskRef) return;\r\n\r\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\r\n      this.onChange(value);\r\n    }\r\n  }\r\n\r\n  _compositionStart(): void { this._composing = true; }\r\n\r\n  _compositionEnd(value: any): void {\r\n    this._composing = false;\r\n    this._compositionMode && this._handleInput(value);\r\n  }\r\n\r\n  private _isAndroid(): boolean {\r\n    return /android (\\d+)/.test(navigator.userAgent.toLowerCase());\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { pipe } from 'imask';\r\nexport { PIPE_TYPE, pipe } from 'imask';\r\n\r\n\r\n/*\r\n * Transforms value through mask\r\n * Takes mask and optionally `from` and `to` pipe types.\r\n * Usage:\r\n *   value | imask:MASK_OR_MASKED:opt_from:opt_to\r\n * Example:\r\n *   {{ 2 | imask:mask }}\r\n*/\r\n@Pipe({name: 'imask'})\r\nexport class IMaskPipe implements PipeTransform {\r\n  transform (...args: Parameters<typeof pipe>): ReturnType<typeof pipe> {\r\n    return pipe(...args);\r\n  }\r\n}\r\n","import { IMaskFactory } from \"./imask-factory\";\r\nimport IMask from 'imask';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DefaultImaskFactory implements IMaskFactory {\r\n    create<Opts extends IMask.AnyMaskedOptions>(el: IMask.MaskElement | IMask.HTMLMaskingElement, opts: Opts) {\r\n        return IMask(el, opts);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IMaskDirective } from './imask.directive';\r\nimport { IMaskFactory } from './imask-factory';\r\nimport { DefaultImaskFactory } from './default-imask-factory';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [IMaskDirective],\r\n  providers: [{provide: IMaskFactory, useClass: DefaultImaskFactory}],\r\n  exports: [IMaskDirective]\r\n})\r\nexport class IMaskDirectiveModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IMaskPipe } from './imask.pipe';\r\nimport { IMaskDirectiveModule } from './directive.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, IMaskDirectiveModule],\r\n  declarations: [IMaskPipe],\r\n  exports: [IMaskPipe, IMaskDirectiveModule]\r\n})\r\nexport class IMaskModule {}\r\n"]}