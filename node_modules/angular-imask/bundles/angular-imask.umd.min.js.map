{"version":3,"sources":["ng://angular-imask/imask-factory.ts","ng://angular-imask/imask.directive.ts","ng://angular-imask/imask.pipe.ts","ng://angular-imask/default-imask-factory.ts","ng://angular-imask/directive.module.ts","ng://angular-imask/imask.module.ts"],"names":["IMaskFactory","Injectable","args","providedIn","MASKEDINPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","IMaskDirective","multi","DEFAULT_IMASK_ELEMENT","elementRef","nativeElement","_elementRef","_renderer","_factory","_compositionMode","this","onTouched","onChange","imaskElement","accept","EventEmitter","complete","_viewInitialized","_composing","_writing","_isAndroid","Object","defineProperty","prototype","maskRef","unmask","typedValue","unmaskedValue","value","element","setProperty","ngAfterViewInit","imask","initMask","ngOnChanges","changes","updateOptions","maskValue","destroyMask","destroy","ngOnDestroy","beginWrite","_writingValue","endWrite","writeValue","el","isActive","_onAccept","emit","_onComplete","create","on","bind","setDisabledState","isDisabled","registerOnChange","fn","registerOnTouched","_handleInput","_compositionStart","_compositionEnd","test","navigator","userAgent","toLowerCase","Directive","selector","host","(input)","(blur)","(compositionstart)","(compositionend)","providers","ElementRef","Renderer2","Optional","type","Inject","COMPOSITION_BUFFER_MODE","Input","Output","IMaskPipe","transform","_i","arguments","length","pipe","apply","__spread","Pipe","name","DefaultImaskFactory","opts","IMask","IMaskDirectiveModule","NgModule","imports","CommonModule","declarations","useClass","exports","IMaskModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\ntype AnyMaskedOptions = import('imask').default.AnyMaskedOptions;\r\ntype HTMLMaskingElement = import('imask').default.HTMLMaskingElement;\r\ntype MaskElement = import('imask').default.MaskElement;\r\ntype InputMask<T> = import('imask').default.InputMask<T>;\r\n\r\n@Injectable({providedIn: \"root\"})\r\nexport abstract class IMaskFactory {\r\n    abstract create<Opts extends AnyMaskedOptions>(el: MaskElement | HTMLMaskingElement, opts: Opts): InputMask<Opts>\r\n}\r\n","import {\r\n  Directive, ElementRef, Input, Output, forwardRef, Provider, Renderer2,\r\n  EventEmitter, OnDestroy, OnChanges, AfterViewInit,\r\n  Optional, Inject, SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms';\r\n\r\nimport {IMaskFactory} from \"./imask-factory\";\r\n\r\n\r\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => IMaskDirective),\r\n  multi: true\r\n};\r\n\r\nconst DEFAULT_IMASK_ELEMENT = (elementRef: any) => elementRef.nativeElement;\r\n@Directive({\r\n  selector: '[imask]',\r\n  host: {\r\n    '(input)': '_handleInput($event.target.value)',\r\n    '(blur)': 'onTouched()',\r\n    '(compositionstart)': '_compositionStart()',\r\n    '(compositionend)': '_compositionEnd($event.target.value)'\r\n  },\r\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class IMaskDirective<Opts extends import('imask').default.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\r\n  maskRef?: IMask.InputMask<Opts>;\r\n  onTouched: any;\r\n  onChange: any;\r\n  private _viewInitialized: boolean;\r\n  private _composing: boolean;\r\n  private _writingValue: any;\r\n  private _writing: boolean;\r\n\r\n  @Input() imask?: Opts;\r\n  @Input() unmask?: boolean|'typed';\r\n  @Input() imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;\r\n  @Output() accept: EventEmitter<any>;\r\n  @Output() complete: EventEmitter<any>;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _renderer: Renderer2,\r\n              private _factory: IMaskFactory,\r\n              @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\r\n    // init here to support AOT (TODO may be will work with ng-packgr - need to check)\r\n    this.onTouched = () => {};\r\n    this.onChange = () => {};\r\n    this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n    this.accept = new EventEmitter();\r\n    this.complete = new EventEmitter();\r\n    this._viewInitialized = false;\r\n    this._composing = false;\r\n    this._writing = false;\r\n\r\n    if (this._compositionMode == null) {\r\n      this._compositionMode = !this._isAndroid();\r\n    }\r\n  }\r\n\r\n  get element () {\r\n    return this.imaskElement(this._elementRef, this);\r\n  }\r\n\r\n  get maskValue (): any {\r\n    if (!this.maskRef) return this.element.value;\r\n\r\n    if (this.unmask === 'typed') return this.maskRef.typedValue;\r\n    if (this.unmask) return this.maskRef.unmaskedValue;\r\n    return this.maskRef.value;\r\n  }\r\n\r\n  set maskValue (value: any) {\r\n    if (this.maskRef) {\r\n      if (this.unmask === 'typed') this.maskRef.typedValue = value;\r\n      else if (this.unmask) this.maskRef.unmaskedValue = value;\r\n      else this.maskRef.value = value;\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.imask) this.initMask();\r\n\r\n    this._viewInitialized = true;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.elementRef && !this.imaskElement) this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n\r\n    if (!changes.imask || !this._viewInitialized) return;\r\n\r\n    if (this.imask) {\r\n      if (this.maskRef) this.maskRef.updateOptions(this.imask);\r\n      else {\r\n        this.initMask();\r\n        this.onChange(this.maskValue);\r\n      }\r\n    } else {\r\n      this.destroyMask();\r\n    }\r\n  }\r\n\r\n  destroyMask () {\r\n    if (this.maskRef) {\r\n      this.maskRef.destroy();\r\n      delete this.maskRef;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy () {\r\n    this.destroyMask();\r\n    this.accept.complete();\r\n    this.complete.complete();\r\n  }\r\n\r\n  beginWrite (value: any): void {\r\n    this._writing = true;\r\n    this._writingValue = value;\r\n  }\r\n\r\n  endWrite (): any {\r\n    this._writing = false;\r\n    return this._writingValue;\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    value = value == null ? '' : value;\r\n\r\n    if (this.maskRef) {\r\n      this.beginWrite(value);\r\n\r\n      if (this.maskValue !== value ||\r\n        // handle cases like Number('') === 0,\r\n        // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\r\n        (typeof value !== 'string' && this.maskRef.value === '') &&\r\n          !this.maskRef.el.isActive\r\n      ) {\r\n        this.maskValue = value;\r\n      }\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  _onAccept () {\r\n    const value = this.maskValue;\r\n    // if value was not changed during writing don't fire events\r\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/136\r\n    if (this._writing && value === this.endWrite()) return;\r\n    this.onChange(value);\r\n    this.accept.emit(value);\r\n  }\r\n\r\n  _onComplete () {\r\n    this.complete.emit(this.maskValue);\r\n  }\r\n\r\n  private initMask () {\r\n    this.maskRef = this._factory.create(this.element, this.imask as Opts)\r\n      .on('accept', this._onAccept.bind(this))\r\n      .on('complete', this._onComplete.bind(this));\r\n  }\r\n\r\n  setDisabledState (isDisabled: boolean) {\r\n    this._renderer.setProperty(this.element, 'disabled', isDisabled)\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\r\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\r\n\r\n  _handleInput(value: any): void {\r\n    // if mask is attached all input goes throw mask\r\n    if (this.maskRef) return;\r\n\r\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\r\n      this.onChange(value);\r\n    }\r\n  }\r\n\r\n  _compositionStart(): void { this._composing = true; }\r\n\r\n  _compositionEnd(value: any): void {\r\n    this._composing = false;\r\n    this._compositionMode && this._handleInput(value);\r\n  }\r\n\r\n  private _isAndroid(): boolean {\r\n    return /android (\\d+)/.test(navigator.userAgent.toLowerCase());\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { pipe } from 'imask';\r\nexport { PIPE_TYPE, pipe } from 'imask';\r\n\r\n\r\n/*\r\n * Transforms value through mask\r\n * Takes mask and optionally `from` and `to` pipe types.\r\n * Usage:\r\n *   value | imask:MASK_OR_MASKED:opt_from:opt_to\r\n * Example:\r\n *   {{ 2 | imask:mask }}\r\n*/\r\n@Pipe({name: 'imask'})\r\nexport class IMaskPipe implements PipeTransform {\r\n  transform (...args: Parameters<typeof pipe>): ReturnType<typeof pipe> {\r\n    return pipe(...args);\r\n  }\r\n}\r\n","import { IMaskFactory } from \"./imask-factory\";\r\nimport IMask from 'imask';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DefaultImaskFactory implements IMaskFactory {\r\n    create<Opts extends IMask.AnyMaskedOptions>(el: IMask.MaskElement | IMask.HTMLMaskingElement, opts: Opts) {\r\n        return IMask(el, opts);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IMaskDirective } from './imask.directive';\r\nimport { IMaskFactory } from './imask-factory';\r\nimport { DefaultImaskFactory } from './default-imask-factory';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [IMaskDirective],\r\n  providers: [{provide: IMaskFactory, useClass: DefaultImaskFactory}],\r\n  exports: [IMaskDirective]\r\n})\r\nexport class IMaskDirectiveModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IMaskPipe } from './imask.pipe';\r\nimport { IMaskDirectiveModule } from './directive.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, IMaskDirectiveModule],\r\n  declarations: [IMaskPipe],\r\n  exports: [IMaskPipe, IMaskDirectiveModule]\r\n})\r\nexport class IMaskModule {}\r\n"]}