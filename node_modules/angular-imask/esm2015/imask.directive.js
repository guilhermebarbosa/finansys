/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, forwardRef, Renderer2, EventEmitter, Optional, Inject, } from '@angular/core';
import { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { IMaskFactory } from "./imask-factory";
/** @type {?} */
export const MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => IMaskDirective)),
    multi: true
};
/** @type {?} */
const DEFAULT_IMASK_ELEMENT = (/**
 * @param {?} elementRef
 * @return {?}
 */
(elementRef) => elementRef.nativeElement);
const ɵ0 = DEFAULT_IMASK_ELEMENT;
/**
 * @template Opts
 */
export class IMaskDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     * @param {?} _factory
     * @param {?} _compositionMode
     */
    constructor(_elementRef, _renderer, _factory, _compositionMode) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._factory = _factory;
        this._compositionMode = _compositionMode;
        // init here to support AOT (TODO may be will work with ng-packgr - need to check)
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        this.imaskElement = DEFAULT_IMASK_ELEMENT;
        this.accept = new EventEmitter();
        this.complete = new EventEmitter();
        this._viewInitialized = false;
        this._composing = false;
        this._writing = false;
        if (this._compositionMode == null) {
            this._compositionMode = !this._isAndroid();
        }
    }
    /**
     * @return {?}
     */
    get element() {
        return this.imaskElement(this._elementRef, this);
    }
    /**
     * @return {?}
     */
    get maskValue() {
        if (!this.maskRef)
            return this.element.value;
        if (this.unmask === 'typed')
            return this.maskRef.typedValue;
        if (this.unmask)
            return this.maskRef.unmaskedValue;
        return this.maskRef.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maskValue(value) {
        if (this.maskRef) {
            if (this.unmask === 'typed')
                this.maskRef.typedValue = value;
            else if (this.unmask)
                this.maskRef.unmaskedValue = value;
            else
                this.maskRef.value = value;
        }
        else {
            this._renderer.setProperty(this.element, 'value', value);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.imask)
            this.initMask();
        this._viewInitialized = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.elementRef && !this.imaskElement)
            this.imaskElement = DEFAULT_IMASK_ELEMENT;
        if (!changes.imask || !this._viewInitialized)
            return;
        if (this.imask) {
            if (this.maskRef)
                this.maskRef.updateOptions(this.imask);
            else {
                this.initMask();
                this.onChange(this.maskValue);
            }
        }
        else {
            this.destroyMask();
        }
    }
    /**
     * @return {?}
     */
    destroyMask() {
        if (this.maskRef) {
            this.maskRef.destroy();
            delete this.maskRef;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyMask();
        this.accept.complete();
        this.complete.complete();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    beginWrite(value) {
        this._writing = true;
        this._writingValue = value;
    }
    /**
     * @return {?}
     */
    endWrite() {
        this._writing = false;
        return this._writingValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        value = value == null ? '' : value;
        if (this.maskRef) {
            this.beginWrite(value);
            if (this.maskValue !== value ||
                // handle cases like Number('') === 0,
                // for details see https://github.com/uNmAnNeR/imaskjs/issues/134
                (typeof value !== 'string' && this.maskRef.value === '') &&
                    !this.maskRef.el.isActive) {
                this.maskValue = value;
            }
        }
        else {
            this._renderer.setProperty(this.element, 'value', value);
        }
    }
    /**
     * @return {?}
     */
    _onAccept() {
        /** @type {?} */
        const value = this.maskValue;
        // if value was not changed during writing don't fire events
        // for details see https://github.com/uNmAnNeR/imaskjs/issues/136
        if (this._writing && value === this.endWrite())
            return;
        this.onChange(value);
        this.accept.emit(value);
    }
    /**
     * @return {?}
     */
    _onComplete() {
        this.complete.emit(this.maskValue);
    }
    /**
     * @private
     * @return {?}
     */
    initMask() {
        this.maskRef = this._factory.create(this.element, (/** @type {?} */ (this.imask)))
            .on('accept', this._onAccept.bind(this))
            .on('complete', this._onComplete.bind(this));
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this.element, 'disabled', isDisabled);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @param {?} value
     * @return {?}
     */
    _handleInput(value) {
        // if mask is attached all input goes throw mask
        if (this.maskRef)
            return;
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this.onChange(value);
        }
    }
    /**
     * @return {?}
     */
    _compositionStart() { this._composing = true; }
    /**
     * @param {?} value
     * @return {?}
     */
    _compositionEnd(value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    }
    /**
     * @private
     * @return {?}
     */
    _isAndroid() {
        return /android (\d+)/.test(navigator.userAgent.toLowerCase());
    }
}
IMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[imask]',
                host: {
                    '(input)': '_handleInput($event.target.value)',
                    '(blur)': 'onTouched()',
                    '(compositionstart)': '_compositionStart()',
                    '(compositionend)': '_compositionEnd($event.target.value)'
                },
                providers: [MASKEDINPUT_VALUE_ACCESSOR]
            },] }
];
/** @nocollapse */
IMaskDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: IMaskFactory },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
];
IMaskDirective.propDecorators = {
    imask: [{ type: Input }],
    unmask: [{ type: Input }],
    imaskElement: [{ type: Input }],
    accept: [{ type: Output }],
    complete: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    IMaskDirective.prototype.maskRef;
    /** @type {?} */
    IMaskDirective.prototype.onTouched;
    /** @type {?} */
    IMaskDirective.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._viewInitialized;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._composing;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._writingValue;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._writing;
    /** @type {?} */
    IMaskDirective.prototype.imask;
    /** @type {?} */
    IMaskDirective.prototype.unmask;
    /** @type {?} */
    IMaskDirective.prototype.imaskElement;
    /** @type {?} */
    IMaskDirective.prototype.accept;
    /** @type {?} */
    IMaskDirective.prototype.complete;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._factory;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._compositionMode;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,