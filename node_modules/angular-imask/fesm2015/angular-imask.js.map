{"version":3,"file":"angular-imask.js","sources":["ng://angular-imask/imask-factory.ts","ng://angular-imask/imask.directive.ts","ng://angular-imask/imask.pipe.ts","ng://angular-imask/default-imask-factory.ts","ng://angular-imask/directive.module.ts","ng://angular-imask/imask.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\ntype AnyMaskedOptions = import('imask').default.AnyMaskedOptions;\r\ntype HTMLMaskingElement = import('imask').default.HTMLMaskingElement;\r\ntype MaskElement = import('imask').default.MaskElement;\r\ntype InputMask<T> = import('imask').default.InputMask<T>;\r\n\r\n@Injectable({providedIn: \"root\"})\r\nexport abstract class IMaskFactory {\r\n    abstract create<Opts extends AnyMaskedOptions>(el: MaskElement | HTMLMaskingElement, opts: Opts): InputMask<Opts>\r\n}\r\n","import {\r\n  Directive, ElementRef, Input, Output, forwardRef, Provider, Renderer2,\r\n  EventEmitter, OnDestroy, OnChanges, AfterViewInit,\r\n  Optional, Inject, SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms';\r\n\r\nimport {IMaskFactory} from \"./imask-factory\";\r\n\r\n\r\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => IMaskDirective),\r\n  multi: true\r\n};\r\n\r\nconst DEFAULT_IMASK_ELEMENT = (elementRef: any) => elementRef.nativeElement;\r\n@Directive({\r\n  selector: '[imask]',\r\n  host: {\r\n    '(input)': '_handleInput($event.target.value)',\r\n    '(blur)': 'onTouched()',\r\n    '(compositionstart)': '_compositionStart()',\r\n    '(compositionend)': '_compositionEnd($event.target.value)'\r\n  },\r\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class IMaskDirective<Opts extends import('imask').default.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\r\n  maskRef?: IMask.InputMask<Opts>;\r\n  onTouched: any;\r\n  onChange: any;\r\n  private _viewInitialized: boolean;\r\n  private _composing: boolean;\r\n  private _writingValue: any;\r\n  private _writing: boolean;\r\n\r\n  @Input() imask?: Opts;\r\n  @Input() unmask?: boolean|'typed';\r\n  @Input() imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;\r\n  @Output() accept: EventEmitter<any>;\r\n  @Output() complete: EventEmitter<any>;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _renderer: Renderer2,\r\n              private _factory: IMaskFactory,\r\n              @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\r\n    // init here to support AOT (TODO may be will work with ng-packgr - need to check)\r\n    this.onTouched = () => {};\r\n    this.onChange = () => {};\r\n    this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n    this.accept = new EventEmitter();\r\n    this.complete = new EventEmitter();\r\n    this._viewInitialized = false;\r\n    this._composing = false;\r\n    this._writing = false;\r\n\r\n    if (this._compositionMode == null) {\r\n      this._compositionMode = !this._isAndroid();\r\n    }\r\n  }\r\n\r\n  get element () {\r\n    return this.imaskElement(this._elementRef, this);\r\n  }\r\n\r\n  get maskValue (): any {\r\n    if (!this.maskRef) return this.element.value;\r\n\r\n    if (this.unmask === 'typed') return this.maskRef.typedValue;\r\n    if (this.unmask) return this.maskRef.unmaskedValue;\r\n    return this.maskRef.value;\r\n  }\r\n\r\n  set maskValue (value: any) {\r\n    if (this.maskRef) {\r\n      if (this.unmask === 'typed') this.maskRef.typedValue = value;\r\n      else if (this.unmask) this.maskRef.unmaskedValue = value;\r\n      else this.maskRef.value = value;\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.imask) this.initMask();\r\n\r\n    this._viewInitialized = true;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.elementRef && !this.imaskElement) this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n\r\n    if (!changes.imask || !this._viewInitialized) return;\r\n\r\n    if (this.imask) {\r\n      if (this.maskRef) this.maskRef.updateOptions(this.imask);\r\n      else {\r\n        this.initMask();\r\n        this.onChange(this.maskValue);\r\n      }\r\n    } else {\r\n      this.destroyMask();\r\n    }\r\n  }\r\n\r\n  destroyMask () {\r\n    if (this.maskRef) {\r\n      this.maskRef.destroy();\r\n      delete this.maskRef;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy () {\r\n    this.destroyMask();\r\n    this.accept.complete();\r\n    this.complete.complete();\r\n  }\r\n\r\n  beginWrite (value: any): void {\r\n    this._writing = true;\r\n    this._writingValue = value;\r\n  }\r\n\r\n  endWrite (): any {\r\n    this._writing = false;\r\n    return this._writingValue;\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    value = value == null ? '' : value;\r\n\r\n    if (this.maskRef) {\r\n      this.beginWrite(value);\r\n\r\n      if (this.maskValue !== value ||\r\n        // handle cases like Number('') === 0,\r\n        // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\r\n        (typeof value !== 'string' && this.maskRef.value === '') &&\r\n          !this.maskRef.el.isActive\r\n      ) {\r\n        this.maskValue = value;\r\n      }\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  _onAccept () {\r\n    const value = this.maskValue;\r\n    // if value was not changed during writing don't fire events\r\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/136\r\n    if (this._writing && value === this.endWrite()) return;\r\n    this.onChange(value);\r\n    this.accept.emit(value);\r\n  }\r\n\r\n  _onComplete () {\r\n    this.complete.emit(this.maskValue);\r\n  }\r\n\r\n  private initMask () {\r\n    this.maskRef = this._factory.create(this.element, this.imask as Opts)\r\n      .on('accept', this._onAccept.bind(this))\r\n      .on('complete', this._onComplete.bind(this));\r\n  }\r\n\r\n  setDisabledState (isDisabled: boolean) {\r\n    this._renderer.setProperty(this.element, 'disabled', isDisabled)\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\r\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\r\n\r\n  _handleInput(value: any): void {\r\n    // if mask is attached all input goes throw mask\r\n    if (this.maskRef) return;\r\n\r\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\r\n      this.onChange(value);\r\n    }\r\n  }\r\n\r\n  _compositionStart(): void { this._composing = true; }\r\n\r\n  _compositionEnd(value: any): void {\r\n    this._composing = false;\r\n    this._compositionMode && this._handleInput(value);\r\n  }\r\n\r\n  private _isAndroid(): boolean {\r\n    return /android (\\d+)/.test(navigator.userAgent.toLowerCase());\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { pipe } from 'imask';\r\nexport { PIPE_TYPE, pipe } from 'imask';\r\n\r\n\r\n/*\r\n * Transforms value through mask\r\n * Takes mask and optionally `from` and `to` pipe types.\r\n * Usage:\r\n *   value | imask:MASK_OR_MASKED:opt_from:opt_to\r\n * Example:\r\n *   {{ 2 | imask:mask }}\r\n*/\r\n@Pipe({name: 'imask'})\r\nexport class IMaskPipe implements PipeTransform {\r\n  transform (...args: Parameters<typeof pipe>): ReturnType<typeof pipe> {\r\n    return pipe(...args);\r\n  }\r\n}\r\n","import { IMaskFactory } from \"./imask-factory\";\r\nimport IMask from 'imask';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DefaultImaskFactory implements IMaskFactory {\r\n    create<Opts extends IMask.AnyMaskedOptions>(el: IMask.MaskElement | IMask.HTMLMaskingElement, opts: Opts) {\r\n        return IMask(el, opts);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IMaskDirective } from './imask.directive';\r\nimport { IMaskFactory } from './imask-factory';\r\nimport { DefaultImaskFactory } from './default-imask-factory';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [IMaskDirective],\r\n  providers: [{provide: IMaskFactory, useClass: DefaultImaskFactory}],\r\n  exports: [IMaskDirective]\r\n})\r\nexport class IMaskDirectiveModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IMaskPipe } from './imask.pipe';\r\nimport { IMaskDirectiveModule } from './directive.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, IMaskDirectiveModule],\r\n  declarations: [IMaskPipe],\r\n  exports: [IMaskPipe, IMaskDirectiveModule]\r\n})\r\nexport class IMaskModule {}\r\n"],"names":[],"mappings":"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"}